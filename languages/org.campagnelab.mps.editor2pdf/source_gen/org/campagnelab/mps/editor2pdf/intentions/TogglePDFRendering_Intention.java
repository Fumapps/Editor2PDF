package org.campagnelab.mps.editor2pdf.intentions;

/*Generated by MPS */

import jetbrains.mps.intentions.AbstractIntentionDescriptor;
import jetbrains.mps.openapi.intentions.IntentionFactory;
import java.util.Collection;
import jetbrains.mps.openapi.intentions.IntentionExecutable;
import jetbrains.mps.openapi.intentions.Kind;
import jetbrains.mps.smodel.SNodePointer;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.openapi.editor.EditorContext;
import java.util.Collections;
import jetbrains.mps.intentions.AbstractIntentionExecutable;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import jetbrains.mps.internal.collections.runtime.IWhereFilter;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.IAttributeDescriptor;
import jetbrains.mps.internal.collections.runtime.Sequence;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SConceptOperations;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import jetbrains.mps.openapi.intentions.IntentionDescriptor;
import org.jetbrains.mps.openapi.language.SConcept;

public final class TogglePDFRendering_Intention extends AbstractIntentionDescriptor implements IntentionFactory {
  private Collection<IntentionExecutable> myCachedExecutable;

  public TogglePDFRendering_Intention() {
    super(Kind.NORMAL, true, new SNodePointer("r:6bb9f222-b46c-45b3-85b5-99e8faaeadce(org.campagnelab.mps.editor2pdf.intentions)", "8751972264247518445"));
  }

  @Override
  public String getPresentation() {
    return "TogglePDFRendering";
  }

  @Override
  public boolean isSurroundWith() {
    return false;
  }

  public Collection<IntentionExecutable> instances(final SNode node, final EditorContext context) {
    if (myCachedExecutable == null) {
      myCachedExecutable = Collections.<IntentionExecutable>singletonList(new IntentionImplementation());
    }
    return myCachedExecutable;
  }
  /*package*/ final class IntentionImplementation extends AbstractIntentionExecutable {
    public IntentionImplementation() {
    }

    @Override
    public String getDescription(final SNode node, final EditorContext editorContext) {
      if (SNodeOperations.isInstanceOf(node, CONCEPTS.EditorAnnotation$wP)) {
        return "Remove PDF Rendering";
      }
      if (ListSequence.fromList(SNodeOperations.getNodeDescendants(node, CONCEPTS.BaseConcept$gP, true, new SAbstractConcept[]{})).all(new IWhereFilter<SNode>() {
        public boolean accept(SNode it) {
          return (new IAttributeDescriptor.NodeAttribute(CONCEPTS.EditorAnnotation$wP).get(it) == null);
        }
      })) {
        return "Activate PDF Rendering";
      } else {
        return "Remove PDF Rendering";
      }
    }

    @Override
    public void execute(final SNode node, final EditorContext editorContext) {
      if (SNodeOperations.isInstanceOf(node, CONCEPTS.EditorAnnotation$wP)) {
        new IAttributeDescriptor.NodeAttribute(CONCEPTS.EditorAnnotation$wP).set(SNodeOperations.getParent(node), null);
        return;
      }

      Iterable<SNode> annotatedNodes = ListSequence.fromList(SNodeOperations.getNodeDescendants(node, CONCEPTS.BaseConcept$gP, false, new SAbstractConcept[]{})).where(new IWhereFilter<SNode>() {
        public boolean accept(SNode it) {
          return (new IAttributeDescriptor.NodeAttribute(CONCEPTS.EditorAnnotation$wP).get(it) != null);
        }
      });
      SNode nodeWithAnnotation;
      if (Sequence.fromIterable(annotatedNodes).isNotEmpty()) {
        nodeWithAnnotation = Sequence.fromIterable(annotatedNodes).first();
      } else {
        nodeWithAnnotation = node;
      }
      if ((new IAttributeDescriptor.NodeAttribute(CONCEPTS.EditorAnnotation$wP).get(nodeWithAnnotation) == null)) {
        new IAttributeDescriptor.NodeAttribute(CONCEPTS.EditorAnnotation$wP).set(nodeWithAnnotation, SConceptOperations.createNewNode(MetaAdapterFactory.getConcept(0x93bc01ac08ca4f11L, 0x9c7d614d04055dfbL, 0x79754067868533ecL, "org.campagnelab.mps.editor2pdf.structure.EditorAnnotation")));
      } else {
        new IAttributeDescriptor.NodeAttribute(CONCEPTS.EditorAnnotation$wP).set(nodeWithAnnotation, null);
      }
    }

    @Override
    public boolean isApplicable(final SNode node, final EditorContext editorContext) {
      return true;
    }



    @Override
    public IntentionDescriptor getDescriptor() {
      return TogglePDFRendering_Intention.this;
    }

  }

  private static final class CONCEPTS {
    /*package*/ static final SConcept EditorAnnotation$wP = MetaAdapterFactory.getConcept(0x93bc01ac08ca4f11L, 0x9c7d614d04055dfbL, 0x79754067868533ecL, "org.campagnelab.mps.editor2pdf.structure.EditorAnnotation");
    /*package*/ static final SConcept BaseConcept$gP = MetaAdapterFactory.getConcept(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x10802efe25aL, "jetbrains.mps.lang.core.structure.BaseConcept");
  }
}
